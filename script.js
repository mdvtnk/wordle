// script.js ‚Äî Multiplayer Wordle frontend for GitHub Pages + Pusher + Vercel Function
// ------------------------------------------------------------------------------
// –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º: –∑–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –±–ª–æ–∫–µ CONFIG (–Ω–∏–∂–µ) –Ω–∞ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:
//  - PUSHER_KEY  : –∫–ª—é—á –∏–∑ Pusher (App Keys)
//  - PUSHER_CLUSTER : –∫–ª–∞—Å—Ç–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä "eu"
//  - SERVER_ENDPOINT : URL –≤–∞—à–µ–≥–æ serverless-—ç–Ω–¥–ø–æ–π–Ω—Ç–∞ (Vercel) –≤–∏–¥–∞ https://your-app.vercel.app/api/send
// ------------------------------------------------------------------------------

// ===================== CONFIG ‚Äî –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –ó–ù–ê–ß–ï–ù–ò–Ø =====================
const PUSHER_KEY = "570abd9dffaf960c32a8";
const PUSHER_CLUSTER = "eu"; // –Ω–∞–ø—Ä–∏–º–µ—Ä "eu"
const SERVER_ENDPOINT = "https://wordle-server-ten.vercel.app/api/send";
// ========================================================================

// –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ Pusher –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –≤ index.html: <script src="https://js.pusher.com/8.2/pusher.min.js"></script>
Pusher.logToConsole = false;
const pusher = new Pusher(PUSHER_KEY, { cluster: PUSHER_CLUSTER });

// ========== –≠–ª–µ–º–µ–Ω—Ç—ã DOM ==========
const loginScreen = document.getElementById("login-screen");
const nicknameInput = document.getElementById("nickname");
const createBtn = document.getElementById("create-room");
const joinCodeInput = document.getElementById("join-code");
const joinBtn = document.getElementById("join-room");

const gameScreen = document.getElementById("game-screen");
const roomInfo = document.getElementById("room-info");
const hostControls = document.getElementById("host-controls");
const secretWordInput = document.getElementById("secret-word");
const startBtn = document.getElementById("start-game");
const guessSection = document.getElementById("guess-section");
const guessInput = document.getElementById("guess");
const sendGuessBtn = document.getElementById("send-guess");
const messagesDiv = document.getElementById("messages");

// –î–æ–ø. —ç–ª–µ–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∑–∂–µ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å)
let playersListDiv = null;

// ========== –°–æ—Å—Ç–æ—è–Ω–∏–µ ==========
let nickname = "";
let roomCode = "";
let channel = null;
let isHost = false;
let secretWord = null;
let players = []; // –º–∞—Å—Å–∏–≤ –Ω–∏–∫–æ–≤
const MAX_PLAYERS = 10;

// ========== –£—Ç–∏–ª–∏—Ç—ã ==========
function generateRoomCode() {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    let code = "";
    for (let i = 0; i < 6; i++) code += chars.charAt(Math.floor(Math.random() * chars.length));
    return code;
}

function showMessage(html) {
    const el = document.createElement("div");
    el.innerHTML = html;
    messagesDiv.appendChild(el);
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
}

function setRoomHeader() {
    roomInfo.textContent = `–ö–æ–º–Ω–∞—Ç–∞: ${roomCode} ‚Äî –ò–≥—Ä–æ–∫–æ–≤: ${players.length}/${MAX_PLAYERS}` + (isHost ? " (–í—ã ‚Äî —Ö–æ—Å—Ç)" : "");
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —à–ª—ë–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ Vercel (serverless) –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç Pusher
async function sendEvent(event, data) {
    if (!SERVER_ENDPOINT || SERVER_ENDPOINT.includes("REPLACE_WITH")) {
        alert("–û—à–∏–±–∫–∞: SERVER_ENDPOINT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ script.js");
        return;
    }
    try {
        const res = await fetch(SERVER_ENDPOINT, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                channel: `room-${roomCode}`,
                event,
                data
            })
        });
        if (!res.ok) {
            const text = await res.text();
            console.error("sendEvent error:", res.status, text);
        }
    } catch (e) {
        console.error("sendEvent fetch failed", e);
    }
}

// –ü–æ–¥–ø–∏—Å–∫–∞ –∏ –±–∏–Ω–¥—ã Pusher
function subscribeToRoom(code) {
    roomCode = code.toUpperCase();
    channel = pusher.subscribe(`room-${roomCode}`);

    channel.bind("player-joined", (data) => {
        // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –≤ data.players –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞/–∫–ª–∏–µ–Ω—Ç–æ–≤.
        players = Array.isArray(data.players) ? data.players.slice(0, MAX_PLAYERS) : players;
        showMessage(`<b>${escapeHtml(data.name)}</b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è(–∞—Å—å).`);
        setRoomHeader();
    });

    channel.bind("player-left", (data) => {
        players = Array.isArray(data.players) ? data.players.slice(0, MAX_PLAYERS) : players;
        showMessage(`<i>${escapeHtml(data.name)} –ø–æ–∫–∏–Ω—É–ª(–∞) –∫–æ–º–Ω–∞—Ç—É</i>`);
        setRoomHeader();
    });

    channel.bind("game-started", (data) => {
        secretWord = data.word?.toLowerCase() || null;
        showMessage(`<b>–•–æ—Å—Ç –Ω–∞—á–∞–ª –∏–≥—Ä—É.</b> –ù–∞—á–∏–Ω–∞–π—Ç–µ —É–≥–∞–¥—ã–≤–∞—Ç—å!`);
        if (!isHost) {
            guessSection.classList.remove("hidden");
        } else {
            hostControls.classList.add("hidden");
        }
    });

    channel.bind("player-guessed", (data) => {
        showMessage(`${escapeHtml(data.name)}: ${escapeHtml(data.guess)}`);
    });

    channel.bind("winner", (data) => {
        showMessage(`üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>${escapeHtml(data.name)}</b> ‚Äî —Å–ª–æ–≤–æ: <b>${escapeHtml(data.word)}</b>`);
        // –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞—É–Ω–¥ ‚Äî —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
        if (isHost) {
            hostControls.classList.remove("hidden");
        } else {
            guessSection.classList.add("hidden");
        }
        // –°–±—Ä–æ—Å —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ word –≤—Å–µ –µ—â—ë –Ω–∞ —Ö–æ—Å—Ç–µ)
        secretWord = null;
    });

    channel.bind("host-changed", (data) => {
        // –ï—Å–ª–∏ —Ö–æ—Å—Ç —Å–º–µ–Ω–∏–ª—Å—è ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º
        showMessage(`<i>–ù–æ–≤—ã–π —Ö–æ—Å—Ç: ${escapeHtml(data.name)}</i>`);
    });

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º UI
    loginScreen.classList.add("hidden");
    gameScreen.classList.remove("hidden");
    setRoomHeader();
    showMessage(`<i>–í—ã –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomCode}. –û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤...</i>`);
}

// –ü—Ä–æ—Å—Ç–∞—è HTML-—ç–∫—Ä–∞–Ω–∏–∑–∞—Ü–∏—è
function escapeHtml(s) {
    if (!s) return "";
    return s.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;");
}

// ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ UI ==========
createBtn.onclick = async () => {
    nickname = nicknameInput.value.trim();
    if (!nickname) return alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫.");
    isHost = true;
    const code = generateRoomCode();
    subscribeToRoom(code);

    players = [nickname];
    setRoomHeader();

    // –°–æ–æ–±—â–∞–µ–º –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ (–∑–¥–µ—Å—å –∫–ª–∏–µ–Ω—Ç —Å–æ–æ–±—â–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä)
    await sendEvent("player-joined", { name: nickname, players });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã —Ö–æ—Å—Ç–∞
    hostControls.classList.remove("hidden");
    guessSection.classList.add("hidden");
};

joinBtn.onclick = async () => {
    nickname = nicknameInput.value.trim();
    const code = joinCodeInput.value.trim().toUpperCase();
    if (!nickname || !code) return alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã.");
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
    subscribeToRoom(code);

    // –ü—Ä–æ—Å–∏–º –¥—Ä—É–≥–∏—Ö –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ (–∫–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç players –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é)
    // –ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º player-joined –∏ –ø–µ—Ä–µ–¥–∞—ë–º —Å–≤–æ–π –Ω–∏–∫;
    players.push(nickname);
    if (players.length > MAX_PLAYERS) {
        alert("–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ (–º–∞–∫—Å 10).");
        // –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å:
        pusher.unsubscribe(`room-${roomCode}`);
        loginScreen.classList.remove("hidden");
        gameScreen.classList.add("hidden");
        return;
    }
    await sendEvent("player-joined", { name: nickname, players });
};

// –•–æ—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É, –∑–∞–¥–∞–≤–∞—è —Å–ª–æ–≤–æ
startBtn.onclick = async () => {
    if (!isHost) return;
    const word = secretWordInput.value.trim().toLowerCase();
    if (!word) return alert("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–≥—Ä—ã.");
    // –•–æ—Å—Ç —Ö—Ä–∞–Ω–∏—Ç —Å–ª–æ–≤–æ –ª–æ–∫–∞–ª—å–Ω–æ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞—á–∞–ª–∞ (–≤ —Å–æ–±—ã—Ç–∏–∏ –º–æ–∂–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–ª–æ–≤–æ,
    // –Ω–æ –Ω–∞–º —É–¥–æ–±–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–ª–∞ ‚Äî —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–ª–æ–≤–æ –≤–∏–¥–∏–º–æ –≤—Å–µ–º —Ç–µ—Ö–Ω–∏—á–Ω–æ,
    // –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ —Å–ª–æ–≤–æ –ù–ï –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∞—Ä–∏–≤–∞—Ç—å ‚Äî –∑–¥–µ—Å—å –¥–æ–≤–µ—Ä—è–µ–º —Ö–æ—Å—Ç—É)
    secretWord = word;
    hostControls.classList.add("hidden");
    await sendEvent("game-started", { word: secretWord });
    showMessage(`<i>–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Ö–æ—Å—Ç–æ–º. –°–ª–æ–≤–æ –∑–∞–¥–∞–Ω–æ.</i>`);
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è
sendGuessBtn.onclick = async () => {
    const guess = guessInput.value.trim().toLowerCase();
    if (!guess) return;
    if (!roomCode) return alert("–í—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ.");
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –ø–æ–ø—ã—Ç–∫–µ
    await sendEvent("player-guessed", { name: nickname, guess });

    // –ï—Å–ª–∏ —É–≥–∞–¥–∞–ª ‚Äî –≤–µ—â–∞–µ–º –ø–æ–±–µ–¥—É
    // –ó–¥–µ—Å—å —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º secretWord; –Ω–æ —Ç.–∫. –Ω–∞—Å—Ç–æ—è—â—É—é –∫–æ–ø–∏—é —Å–ª–æ–≤–∞ —Ö—Ä–∞–Ω–∏—Ç —Ö–æ—Å—Ç,
    // —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ secretWord –∑–∞–¥–∞–Ω –Ω–∞ —ç—Ç–æ–º –∫–ª–∏–µ–Ω—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä –µ—Å–ª–∏ —Ö–æ—Å—Ç)
    // –ù–æ —Ö–æ—Å—Ç —Ç–æ–∂–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏–µ –∏–≥—Ä–æ–∫—É-–ø–æ–±–µ–¥–∏—Ç–µ–ª—é, –ø–æ—ç—Ç–æ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ:
    if (guess === secretWord) {
        await sendEvent("winner", { name: nickname, word: secretWord });
    }

    guessInput.value = "";
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–∫–∏ ‚Äî —Å–æ–æ–±—â–∞–µ–º –¥—Ä—É–≥–∏–º, —á—Ç–æ –ø–æ–∫–∏–Ω—É–ª
window.addEventListener("beforeunload", async (e) => {
    if (!roomCode || !nickname) return;
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π players —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ –Ω–∏–∫–∞
    players = players.filter(n => n !== nickname);
    // sendEvent –º–æ–∂–µ—Ç –Ω–µ —É—Å–ø–µ—Ç—å —É–π—Ç–∏ ‚Äî —ç—Ç–æ best-effort
    navigator.sendBeacon && navigator.sendBeacon(SERVER_ENDPOINT, JSON.stringify({
        channel: `room-${roomCode}`,
        event: "player-left",
        data: { name: nickname, players }
    }));
});

// –ù–µ–±–æ–ª—å—à–∞—è –ø–æ–º–æ—â—å –ø–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
function renderPlayersList() {
    if (!playersListDiv) {
        playersListDiv = document.createElement("div");
        messagesDiv.parentNode.insertBefore(playersListDiv, messagesDiv);
    }
    playersListDiv.innerHTML = `<strong>–ò–≥—Ä–æ–∫–∏:</strong> ${players.map(p => escapeHtml(p)).join(", ")}`;
}

// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è players –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É (–ª–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ UI)
setInterval(() => {
    setRoomHeader();
    renderPlayersList();
}, 1000);

// ========== –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ UI ==========
showMessage("<i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å. –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ.</i>");

